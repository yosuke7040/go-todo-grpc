// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file chat/v1/chat.proto (package chat.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message chat.v1.GetMessageStreamRequest
 */
export class GetMessageStreamRequest extends Message<GetMessageStreamRequest> {
  /**
   * @generated from field: google.protobuf.Empty empty = 1;
   */
  empty?: Empty;

  constructor(data?: PartialMessage<GetMessageStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.v1.GetMessageStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "empty", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMessageStreamRequest {
    return new GetMessageStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMessageStreamRequest {
    return new GetMessageStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMessageStreamRequest {
    return new GetMessageStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMessageStreamRequest | PlainMessage<GetMessageStreamRequest> | undefined, b: GetMessageStreamRequest | PlainMessage<GetMessageStreamRequest> | undefined): boolean {
    return proto3.util.equals(GetMessageStreamRequest, a, b);
  }
}

/**
 * @generated from message chat.v1.GetMessageStreamResponse
 */
export class GetMessageStreamResponse extends Message<GetMessageStreamResponse> {
  /**
   * Message message = 1;
   *
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<GetMessageStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.v1.GetMessageStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMessageStreamResponse {
    return new GetMessageStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMessageStreamResponse {
    return new GetMessageStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMessageStreamResponse {
    return new GetMessageStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMessageStreamResponse | PlainMessage<GetMessageStreamResponse> | undefined, b: GetMessageStreamResponse | PlainMessage<GetMessageStreamResponse> | undefined): boolean {
    return proto3.util.equals(GetMessageStreamResponse, a, b);
  }
}

/**
 * @generated from message chat.v1.CreateMessageRequest
 */
export class CreateMessageRequest extends Message<CreateMessageRequest> {
  /**
   * Message message = 1;
   *
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<CreateMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.v1.CreateMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMessageRequest {
    return new CreateMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMessageRequest {
    return new CreateMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMessageRequest {
    return new CreateMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMessageRequest | PlainMessage<CreateMessageRequest> | undefined, b: CreateMessageRequest | PlainMessage<CreateMessageRequest> | undefined): boolean {
    return proto3.util.equals(CreateMessageRequest, a, b);
  }
}

/**
 * @generated from message chat.v1.CreateMessageResponse
 */
export class CreateMessageResponse extends Message<CreateMessageResponse> {
  /**
   * @generated from field: string result = 1;
   */
  result = "";

  constructor(data?: PartialMessage<CreateMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.v1.CreateMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMessageResponse {
    return new CreateMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMessageResponse {
    return new CreateMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMessageResponse {
    return new CreateMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMessageResponse | PlainMessage<CreateMessageResponse> | undefined, b: CreateMessageResponse | PlainMessage<CreateMessageResponse> | undefined): boolean {
    return proto3.util.equals(CreateMessageResponse, a, b);
  }
}

/**
 * @generated from message chat.v1.ChatMessageStreamRequest
 */
export class ChatMessageStreamRequest extends Message<ChatMessageStreamRequest> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<ChatMessageStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.v1.ChatMessageStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessageStreamRequest {
    return new ChatMessageStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessageStreamRequest {
    return new ChatMessageStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessageStreamRequest {
    return new ChatMessageStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessageStreamRequest | PlainMessage<ChatMessageStreamRequest> | undefined, b: ChatMessageStreamRequest | PlainMessage<ChatMessageStreamRequest> | undefined): boolean {
    return proto3.util.equals(ChatMessageStreamRequest, a, b);
  }
}

/**
 * @generated from message chat.v1.ChatMessageStreamResponse
 */
export class ChatMessageStreamResponse extends Message<ChatMessageStreamResponse> {
  /**
   * Message message = 1;
   *
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<ChatMessageStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.v1.ChatMessageStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessageStreamResponse {
    return new ChatMessageStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessageStreamResponse {
    return new ChatMessageStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessageStreamResponse {
    return new ChatMessageStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessageStreamResponse | PlainMessage<ChatMessageStreamResponse> | undefined, b: ChatMessageStreamResponse | PlainMessage<ChatMessageStreamResponse> | undefined): boolean {
    return proto3.util.equals(ChatMessageStreamResponse, a, b);
  }
}

